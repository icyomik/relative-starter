建立一个小项目，英文名为"relative-starter"，中文名为"相对启动器"。

其实我是想让这个小项目在后期为Python、Shell Script等可执行脚本，特别是PyGTK这样的可视图形
脚本程序服务的。

为什么要建立这个项目，怎么说好呢，嗯，先说说我的需求吧。

我想要在任何装有Linux的机器上，双击即可运行图形脚本程序，比如"cpu-g"(类似Win下的cpu-z)这
种用Python写成的PyGTK程序。很显然，一般情况下这是不可能做到的。

什么？你说可以建立一个 .desktop 启动器？拜托，那可是要绝对路径的，不是在所有机器上"cpu-g"
的路径都一样的。

什么？你说还可以在类似Nautilus的首选项中修改设置为双击运行可执行脚本？拜托，也不是所有人都
会设置成这样的。比如我就喜欢设置成双击编辑可执行脚本，可以方便随时修改程序，所以嘛……

什么？你还说可以把程序打成Deb包？好吧好吧，这样勉强算你说过去了，可是你有没有想过，不是所有
用户在他所运行着的系统上都拥有Deb包安装权限的。何况，像我这样喜欢绿色解压包，而不是软件安装
包的人可不在少数。

最最最重要的是，很多刚从Win过来的新手也是习惯绿色解压包的(当然，我还是新手吧~)，而不是打开
终端然后输入什么什么进行安装，那对于类似我女友的人来说，跟说天书没什么区别。

难道，我们真的为了运行这样一个图形脚本程序，必须要打开终端，然后一路cd进入类似"cpu-g"这样的
程序的目录中，然后 ./cpu-g 来运行？

不不不，怎么可能呢！既然文本模式的脚本不能双击运行，那怎么不换个思路，比如二进制的ELF可执行
程序就是可以双击运行的！

所以咯，我用C写了这么一个小项目，就是为了双击运行ELF文件，再FORK一个进程调用可执行的图形脚
本，然后退出自身，一点资源也不占，就像一个中继器一样。

更何况这个程序可以调用任何程序，包括二进制可执行程序和文本形式的脚本，当然也包括安装脚本了，
所以对那些不懂终端的新手尤为有用。
